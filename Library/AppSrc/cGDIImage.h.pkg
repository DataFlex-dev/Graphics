Use cGDIPlus.h.pkg
Use Structs\tUUID.Pkg
Use Structs\tPropertyItem.Pkg
Use Shift.pkg

Define S_OK             for |CI$00000000    // Operation successful
Define S_FALSE          for |CI$1
Define E_NOTIMPL        for |CI$80004001    // not implemented
Define E_NOINTERFACE    for |CI$80004002    // No such interface supported
Define E_ABORT          for |CI$80004004    // Operation aborted
Define E_FAIL           for |CI$80004005    // Unspecified failure; Unicode only
Define E_INVALIDARG     for |CI$80070057    // One or more arguments are not valid
Define E_ACCESSDENIED   for |CI$80070005    // General access denied Error
Define E_HANDLE         for |CI$80070006    // Handle that is not valid
Define E_OUTOFMEMORY    for |CI$8007000E    // Failed to allocate necessary memory
Define E_POINTER        for |CI$80004003    // Pointer that is not valid
Define E_UNEXPECTED     for |CI$8000FFFF    // Unexpected failure

//---------------------------------------------------------------------------
// GdipGetImageType constants
//---------------------------------------------------------------------------
Define gpImageType for Integer
    Define gpImageTypeUnknown  for 0 // Indicates that the image type is not known
    Define gpImageTypeBitmap   for 1 // Indicates a bitmap image
    Define gpImageTypeMetafile for 2 // Indicates a metafile image

//---------------------------------------------------------------------------
// Image property types
//---------------------------------------------------------------------------
Define gpPropertyTagType for Integer
    Define gpPropertyTagTypeByte      for 1  // Specifies that the value data member is an array of bytes
    Define gpPropertyTagTypeASCII     for 2  // Specifies that the value data member is a null-terminated ASCII string. If you set the type data member of a PropertyItem object to PropertyTagTypeASCII, you should set the length data member to the length of the string including the NULL terminator. For example, the string HELLO would have a length of 6
    Define gpPropertyTagTypeShort     for 3  // Specifies that the value data member is an array of unsigned short (16-bit) integers
    Define gpPropertyTagTypeLong      for 4  // Specifies that the value data member is an array of unsigned long (32-bit) integers
    Define gpPropertyTagTypeRational  for 5  // Specifies that the value data member is an array of pairs of unsigned long integers. Each pair represents a fraction; the first Integer is the numerator and the second Integer is the denominator
    Define gpPropertyTagTypeUndefined for 7  // Specifies that the value data member is an array of bytes that can hold values of any data type
    Define gpPropertyTagTypeSLONG     for 9  // Specifies that the value data member is an array of signed long (32-bit) integers
    Define gpPropertyTagTypeSRational for 10 // Specifies that the value data member is an array of pairs of signed long integers. Each pair represents a fraction; the first integer is the numerator and the second integer is the denominator

//---------------------------------------------------------------------------
// Image property ID tags
//---------------------------------------------------------------------------
Define gpPropertyTag for Integer
    Define gpPropertyTagExifIFD             for |CI$8769
    Define gpPropertyTagGpsIFD              for |CI$8825

    Define gpPropertyTagNewSubfileType        for |CI$00FE
    Define gpPropertyTagSubfileType           for |CI$00FF
    Define gpPropertyTagImageWidth            for |CI$0100
    Define gpPropertyTagImageHeight           for |CI$0101
    Define gpPropertyTagBitsPerSample         for |CI$0102
    Define gpPropertyTagCompression           for |CI$0103
    Define gpPropertyTagPhotometricInterp     for |CI$0106
    Define gpPropertyTagThreshHolding         for |CI$0107
    Define gpPropertyTagCellWidth             for |CI$0108
    Define gpPropertyTagCellHeight            for |CI$0109
    Define gpPropertyTagFillOrder             for |CI$010A
    Define gpPropertyTagDocumentName          for |CI$010D
    Define gpPropertyTagImageDescription      for |CI$010E
    Define gpPropertyTagEquipMake             for |CI$010F
    Define gpPropertyTagEquipModel            for |CI$0110
    Define gpPropertyTagStripOffsets          for |CI$0111
    Define gpPropertyTagOrientation           for |CI$0112
    Define gpPropertyTagSamplesPerPixel       for |CI$0115
    Define gpPropertyTagRowsPerStrip          for |CI$0116
    Define gpPropertyTagStripBytesCount       for |CI$0117
    Define gpPropertyTagMinSampleValue        for |CI$0118
    Define gpPropertyTagMaxSampleValue        for |CI$0119
    Define gpPropertyTagXResolution           for |CI$011A   // Image resolution in width direction
    Define gpPropertyTagYResolution           for |CI$011B   // Image resolution in height direction
    Define gpPropertyTagPlanarConfig          for |CI$011C   // Image data arrangement
    Define gpPropertyTagPageName              for |CI$011D
    Define gpPropertyTagXPosition             for |CI$011E
    Define gpPropertyTagYPosition             for |CI$011F
    Define gpPropertyTagFreeOffset            for |CI$0120
    Define gpPropertyTagFreeByteCounts        for |CI$0121
    Define gpPropertyTagGrayResponseUnit      for |CI$0122
    Define gpPropertyTagGrayResponseCurve     for |CI$0123
    Define gpPropertyTagT4Option              for |CI$0124
    Define gpPropertyTagT6Option              for |CI$0125
    Define gpPropertyTagResolutionUnit        for |CI$0128   // Unit of X and Y resolution
    Define gpPropertyTagPageNumber            for |CI$0129
    Define gpPropertyTagTransferFuncition     for |CI$012D
    Define gpPropertyTagSoftwareUsed          for |CI$0131
    Define gpPropertyTagDateTime              for |CI$0132
    Define gpPropertyTagArtist                for |CI$013B
    Define gpPropertyTagHostComputer          for |CI$013C
    Define gpPropertyTagPredictor             for |CI$013D
    Define gpPropertyTagWhitePoint            for |CI$013E
    Define gpPropertyTagPrimaryChromaticities for |CI$013F
    Define gpPropertyTagColorMap              for |CI$0140
    Define gpPropertyTagHalftoneHints         for |CI$0141
    Define gpPropertyTagTileWidth             for |CI$0142
    Define gpPropertyTagTileLength            for |CI$0143
    Define gpPropertyTagTileOffset            for |CI$0144
    Define gpPropertyTagTileByteCounts        for |CI$0145
    Define gpPropertyTagInkSet                for |CI$014C
    Define gpPropertyTagInkNames              for |CI$014D
    Define gpPropertyTagNumberOfInks          for |CI$014E
    Define gpPropertyTagDotRange              for |CI$0150
    Define gpPropertyTagTargetPrinter         for |CI$0151
    Define gpPropertyTagExtraSamples          for |CI$0152
    Define gpPropertyTagSampleFormat          for |CI$0153
    Define gpPropertyTagSMinSampleValue       for |CI$0154
    Define gpPropertyTagSMaxSampleValue       for |CI$0155
    Define gpPropertyTagTransferRange         for |CI$0156

    Define gpPropertyTagJPEGProc                  for |CI$0200
    Define gpPropertyTagJPEGInterFormat           for |CI$0201
    Define gpPropertyTagJPEGInterLength           for |CI$0202
    Define gpPropertyTagJPEGRestartInterval       for |CI$0203
    Define gpPropertyTagJPEGLosslessPredictors    for |CI$0205
    Define gpPropertyTagJPEGPointTransforms       for |CI$0206
    Define gpPropertyTagJPEGQTables               for |CI$0207
    Define gpPropertyTagJPEGDCTables              for |CI$0208
    Define gpPropertyTagJPEGACTables              for |CI$0209

    Define gpPropertyTagYCbCrCoefficients for |CI$0211
    Define gpPropertyTagYCbCrSubsampling  for |CI$0212
    Define gpPropertyTagYCbCrPositioning  for |CI$0213
    Define gpPropertyTagREFBlackWhite     for |CI$0214

    Define gpPropertyTagICCProfile           for |CI$8773 // This TAG is defined by ICC for embedded ICC in TIFF
    Define gpPropertyTagGamma                for |CI$0301
    Define gpPropertyTagICCProfileDescriptor for |CI$0302
    Define gpPropertyTagSRGBRenderingIntent  for |CI$0303

    Define gpPropertyTagImageTitle          for |CI$0320
    Define gpPropertyTagCopyright           for |CI$8298

    // Extra TAGs (Like Adobe Image Information tags etc.)

    Define gpPropertyTagResolutionXUnit           for |CI$5001
    Define gpPropertyTagResolutionYUnit           for |CI$5002
    Define gpPropertyTagResolutionXLengthUnit     for |CI$5003
    Define gpPropertyTagResolutionYLengthUnit     for |CI$5004
    Define gpPropertyTagPrintFlags                for |CI$5005
    Define gpPropertyTagPrintFlagsVersion         for |CI$5006
    Define gpPropertyTagPrintFlagsCrop            for |CI$5007
    Define gpPropertyTagPrintFlagsBleedWidth      for |CI$5008
    Define gpPropertyTagPrintFlagsBleedWidthScale for |CI$5009
    Define gpPropertyTagHalftoneLPI               for |CI$500A
    Define gpPropertyTagHalftoneLPIUnit           for |CI$500B
    Define gpPropertyTagHalftoneDegree            for |CI$500C
    Define gpPropertyTagHalftoneShape             for |CI$500D
    Define gpPropertyTagHalftoneMisc              for |CI$500E
    Define gpPropertyTagHalftoneScreen            for |CI$500F
    Define gpPropertyTagJPEGQuality               for |CI$5010
    Define gpPropertyTagGridSize                  for |CI$5011
    Define gpPropertyTagThumbnailFormat           for |CI$5012 // 1 = JPEG, 0 = RAW RGB
    Define gpPropertyTagThumbnailWidth            for |CI$5013
    Define gpPropertyTagThumbnailHeight           for |CI$5014
    Define gpPropertyTagThumbnailColorDepth       for |CI$5015
    Define gpPropertyTagThumbnailPlanes           for |CI$5016
    Define gpPropertyTagThumbnailRawBytes         for |CI$5017
    Define gpPropertyTagThumbnailSize             for |CI$5018
    Define gpPropertyTagThumbnailCompressedSize   for |CI$5019
    Define gpPropertyTagColorTransferFunction     for |CI$501A
    Define gpPropertyTagThumbnailData             for |CI$501B // RAW thumbnail bits in JPEG format or RGB format depends on PropertyTagThumbnailFormat

    // Thumbnail related TAGs

    Define gpPropertyTagThumbnailImageWidth            for |CI$5020 // Thumbnail width
    Define gpPropertyTagThumbnailImageHeight           for |CI$5021 // Thumbnail height
    Define gpPropertyTagThumbnailBitsPerSample         for |CI$5022 // Number of bits per component
    Define gpPropertyTagThumbnailCompression           for |CI$5023 // Compression Scheme
    Define gpPropertyTagThumbnailPhotometricInterp     for |CI$5024 // Pixel composition
    Define gpPropertyTagThumbnailImageDescription      for |CI$5025 // Image Tile
    Define gpPropertyTagThumbnailEquipMake             for |CI$5026 // Manufacturer of Image Input equipment
    Define gpPropertyTagThumbnailEquipModel            for |CI$5027 // Model of Image input equipment
    Define gpPropertyTagThumbnailStripOffsets          for |CI$5028 // Image data location
    Define gpPropertyTagThumbnailOrientation           for |CI$5029 // Orientation of image
    Define gpPropertyTagThumbnailSamplesPerPixel       for |CI$502A // Number of components
    Define gpPropertyTagThumbnailRowsPerStrip          for |CI$502B // Number of rows per strip
    Define gpPropertyTagThumbnailStripBytesCount       for |CI$502C // Bytes per compressed strip
    Define gpPropertyTagThumbnailResolutionX           for |CI$502D // Resolution in width direction
    Define gpPropertyTagThumbnailResolutionY           for |CI$502E // Resolution in height direction
    Define gpPropertyTagThumbnailPlanarConfig          for |CI$502F // Image data arrangement
    Define gpPropertyTagThumbnailResolutionUnit        for |CI$5030 // Unit of X and Y Resolution
    Define gpPropertyTagThumbnailTransferFunction      for |CI$5031 // Transfer function
    Define gpPropertyTagThumbnailSoftwareUsed          for |CI$5032 // Software used
    Define gpPropertyTagThumbnailDateTime              for |CI$5033 // File change date and time
    Define gpPropertyTagThumbnailArtist                for |CI$5034 // Person who created the image
    Define gpPropertyTagThumbnailWhitePoint            for |CI$5035 // White point chromaticity
    Define gpPropertyTagThumbnailPrimaryChromaticities for |CI$5036 // Chromaticities of primaries
    Define gpPropertyTagThumbnailYCbCrCoefficients     for |CI$5037 // Color space transformation coefficients
    Define gpPropertyTagThumbnailYCbCrSubsampling      for |CI$5038 // Subsampling ratio of Y to C
    Define gpPropertyTagThumbnailYCbCrPositioning      for |CI$5039 // Y and C position
    Define gpPropertyTagThumbnailRefBlackWhite         for |CI$503A // Pair of black and white reference values
    Define gpPropertyTagThumbnailCopyRight             for |CI$503B // CopyRight holder

    Define gpPropertyTagLuminanceTable            for |CI$5090
    Define gpPropertyTagChrominanceTable          for |CI$5091

    Define gpPropertyTagFrameDelay                for |CI$5100
    Define gpPropertyTagLoopCount                 for |CI$5101

    Define gpPropertyTagGlobalPalette             for |CI$5102
    Define gpPropertyTagIndexBackground           for |CI$5103
    Define gpPropertyTagIndexTransparent          for |CI$5104

    Define gpPropertyTagPixelUnit         for |CI$5110  // Unit specifier for pixel/unit
    Define gpPropertyTagPixelPerUnitX     for |CI$5111  // Pixels per unit in X
    Define gpPropertyTagPixelPerUnitY     for |CI$5112  // Pixels per unit in Y
    Define gpPropertyTagPaletteHistogram  for |CI$5113  // Palette histogram

    // EXIF specific tag

    Define gpPropertyTagExifExposureTime  for |CI$829A
    Define gpPropertyTagExifFNumber       for |CI$829D

    Define gpPropertyTagExifExposureProg  for |CI$8822
    Define gpPropertyTagExifSpectralSense for |CI$8824
    Define gpPropertyTagExifISOSpeed      for |CI$8827
    Define gpPropertyTagExifOECF          for |CI$8828

    Define gpPropertyTagExifVer            for |CI$9000
    Define gpPropertyTagExifDTOrig         for |CI$9003 // Date & time of original
    Define gpPropertyTagExifDTDigitized    for |CI$9004 // Date & time of digital data generation

    Define gpPropertyTagExifCompConfig     for |CI$9101
    Define gpPropertyTagExifCompBPP        for |CI$9102

    Define gpPropertyTagExifShutterSpeed   for |CI$9201
    Define gpPropertyTagExifAperture       for |CI$9202
    Define gpPropertyTagExifBrightness     for |CI$9203
    Define gpPropertyTagExifExposureBias   for |CI$9204
    Define gpPropertyTagExifMaxAperture    for |CI$9205
    Define gpPropertyTagExifSubjectDist    for |CI$9206
    Define gpPropertyTagExifMeteringMode   for |CI$9207
    Define gpPropertyTagExifLightSource    for |CI$9208
    Define gpPropertyTagExifFlash          for |CI$9209
    Define gpPropertyTagExifFocalLength    for |CI$920A
    Define gpPropertyTagExifSubjectArea    for |CI$9214  // exif 2.2 Subject Area
    Define gpPropertyTagExifMakerNote      for |CI$927C  // The "MakerNote" tag contains image information normally in a proprietary binary format.
    Define gpPropertyTagExifUserComment    for |CI$9286
    Define gpPropertyTagExifDTSubsec       for |CI$9290  // Date & Time subseconds
    Define gpPropertyTagExifDTOrigSS       for |CI$9291  // Date & Time original subseconds
    Define gpPropertyTagExifDTDigSS        for |CI$9292  // Date & TIme digitized subseconds

    Define gpPropertyTagExifFPXVer         for |CI$A000
    Define gpPropertyTagExifColorSpace     for |CI$A001
    Define gpPropertyTagExifPixXDim        for |CI$A002
    Define gpPropertyTagExifPixYDim        for |CI$A003
    Define gpPropertyTagExifRelatedWav     for |CI$A004  // related sound file
    Define gpPropertyTagExifInterop        for |CI$A005
    Define gpPropertyTagExifFlashEnergy    for |CI$A20B
    Define gpPropertyTagExifSpatialFR      for |CI$A20C  // Spatial Frequency Response
    Define gpPropertyTagExifFocalXRes      for |CI$A20E  // Focal Plane X Resolution
    Define gpPropertyTagExifFocalYRes      for |CI$A20F  // Focal Plane Y Resolution
    Define gpPropertyTagExifFocalResUnit   for |CI$A210  // Focal Plane Resolution Unit
    Define gpPropertyTagExifSubjectLoc     for |CI$A214
    Define gpPropertyTagExifExposureIndex  for |CI$A215
    Define gpPropertyTagExifSensingMethod  for |CI$A217
    Define gpPropertyTagExifFileSource     for |CI$A300
    Define gpPropertyTagExifSceneType      for |CI$A301
    Define gpPropertyTagExifCfaPattern     for |CI$A302

    // New EXIF 2.2 properties

    Define gpPropertyTagExifCustomRendered           for |CI$A401
    Define gpPropertyTagExifExposureMode             for |CI$A402
    Define gpPropertyTagExifWhiteBalance             for |CI$A403
    Define gpPropertyTagExifDigitalZoomRatio         for |CI$A404
    Define gpPropertyTagExifFocalLengthIn35mmFilm    for |CI$A405
    Define gpPropertyTagExifSceneCaptureType         for |CI$A406
    Define gpPropertyTagExifGainControl              for |CI$A407
    Define gpPropertyTagExifContrast                 for |CI$A408
    Define gpPropertyTagExifSaturation               for |CI$A409
    Define gpPropertyTagExifSharpness                for |CI$A40A
    Define gpPropertyTagExifDeviceSettingDesc        for |CI$A40B
    Define gpPropertyTagExifSubjectDistanceRange     for |CI$A40C
    Define gpPropertyTagExifUniqueImageID            for |CI$A420

    Define gpPropertyTagGpsVer              for |CI$0000
    Define gpPropertyTagGpsLatitudeRef      for |CI$0001
    Define gpPropertyTagGpsLatitude         for |CI$0002
    Define gpPropertyTagGpsLongitudeRef     for |CI$0003
    Define gpPropertyTagGpsLongitude        for |CI$0004
    Define gpPropertyTagGpsAltitudeRef      for |CI$0005
    Define gpPropertyTagGpsAltitude         for |CI$0006
    Define gpPropertyTagGpsGpsTime          for |CI$0007
    Define gpPropertyTagGpsGpsSatellites    for |CI$0008
    Define gpPropertyTagGpsGpsStatus        for |CI$0009
    Define gpPropertyTagGpsGpsMeasureMode   for |CI$000A
    Define gpPropertyTagGpsGpsDop           for |CI$000B  // Measurement precision
    Define gpPropertyTagGpsSpeedRef         for |CI$000C
    Define gpPropertyTagGpsSpeed            for |CI$000D
    Define gpPropertyTagGpsTrackRef         for |CI$000E
    Define gpPropertyTagGpsTrack            for |CI$000F
    Define gpPropertyTagGpsImgDirRef        for |CI$0010
    Define gpPropertyTagGpsImgDir           for |CI$0011
    Define gpPropertyTagGpsMapDatum         for |CI$0012
    Define gpPropertyTagGpsDestLatRef       for |CI$0013
    Define gpPropertyTagGpsDestLat          for |CI$0014
    Define gpPropertyTagGpsDestLongRef      for |CI$0015
    Define gpPropertyTagGpsDestLong         for |CI$0016
    Define gpPropertyTagGpsDestBearRef      for |CI$0017
    Define gpPropertyTagGpsDestBear         for |CI$0018
    Define gpPropertyTagGpsDestDistRef      for |CI$0019
    Define gpPropertyTagGpsDestDist         for |CI$001A
    Define gpPropertyTagGpsProcessingMethod for |CI$001B
    Define gpPropertyTagGpsAreaInformation  for |CI$001C
    Define gpPropertyTagGpsDate             for |CI$001D
    Define gpPropertyTagGpsDifferential     for |CI$001E

Define gpDitherType for Integer
    Define gpDitherTypeNone             for 0  // No dithering is performed. Pixels in the source bitmap are mapped to the nearest color in the palette specified by the palette parameter of the Bitmap::ConvertFormat method. This algorithm can be used with any palette. If the palette specified by the palette parameter does not have one of the standard fixed formats listed in the PaletteType enumeration, pass PaletteTypeCustom to the palettetype parameter
    Define gpDitherTypeSolid            for 1  // No dithering is performed. Pixels in the source bitmap are mapped to the nearest color in the palette specified by the palette parameter of the Bitmap::ConvertFormat method. This algorithm can be used with any palette. If the palette specified by the palette parameter does not have one of the standard fixed formats listed in the PaletteType enumeration, pass PaletteTypeCustom to the palettetype parameter.
    Define gpDitherTypeOrdered4x4       for 2  // You can use this algorithm to perform dithering based on the colors in one of the standard fixed palettes. You can also use this algorithm to convert a bitmap to a 16-bits-per-pixel format that has no palette
    Define gpDitherTypeOrdered8x8       for 3  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeOrdered16x16     for 4  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeOrdered91x91     for 5  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeSpiral4x4        for 6  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeSpiral8x8        for 7  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeDualSpiral4x4    for 8  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeDualSpiral8x8    for 9  // Dithering is performed using the colors in one of the standard fixed palettes
    Define gpDitherTypeErrorDiffusion   for 10 // Dithering is performed based on the palette specified by the palette parameter of the Bitmap::ConvertFormat method. This algorithm can be used with any palette. If the palette specified by the palette parameter does not have one of the standard fixed formats listed in the PaletteType enumeration, pass PaletteTypeCustom to the palettetype parameter

Define gpPaletteType for Integer
    Define gpPaletteTypeCustom              for 0 // An arbitrary custom palette provided by the caller
    Define gpPaletteTypeOptimal             for 1 // An palette of colors that are optimal for a particular bitmap. To create an optimal palette, pass PaletteTypeOptimal, the number of colors you want in the palette, and the Pointer of a Bitmap object to the Bitmap::InitializePalette method
    Define gpPaletteTypeFixedBW             for 2 // A palette that has two colors. This palette type is suitable for bitmaps that store 1 bit per pixel
    Define gpPaletteTypeFixedHalftone8      for 3 // A palette based on two intensities each (off or full) for the red, green, and blue channels. Also contains the 16 colors of the system palette. Because all eight of the on/off combinations of red, green, and blue are already in the system palette, this palette is the same as the system palette. This palette type is suitable for bitmaps that store 4 bits per pixel
    Define gpPaletteTypeFixedHalftone27     for 4 // A palette based on three intensities each for the red, green, and blue channels. Also contains the 16 colors of the system palette. Eight of the 16 system palette colors are among the 27 three-intensity combinations of red, green, and blue, so the total number of colors in the palette is 35. If the palette also includes the transparent color, the total number of colors is 36
    Define gpPaletteTypeFixedHalftone64     for 5 // A palette based on four intensities each for the red, green, and blue channels. Also contains the 16 colors of the system palette. Eight of the 16 system palette colors are among the 64 four-intensity combinations of red, green, and blue, so the total number of colors in the palette is 72. If the palette also includes the transparent color, the total number of colors is 73
    Define gpPaletteTypeFixedHalftone125    for 6 // A palette based on five intensities each for the red, green, and blue channels. Also contains the 16 colors of the system palette. Eight of the 16 system palette colors are among the 125 five-intensity combinations of red, green, and blue, so the total number of colors in the palette is 133. If the palette also includes the transparent color, the total number of colors is 134
    Define gpPaletteTypeFixedHalftone216    for 7 // A palette based on six intensities each for the red, green, and blue channels. Also contains the 16 colors of the system palette. Eight of the 16 system palette colors are among the 216 six-intensity combinations of red, green, and blue, so the total number of colors in the palette is 224. If the palette also includes the transparent color, the total number of colors is 225. This palette is sometimes called the Windows halftone palette or the Web palette
    Define gpPaletteTypeFixedHalftone252    for 8 // A palette based on 6 intensities of red, 7 intensities of green, and 6 intensities of blue. The system palette is not included. The total number of colors is 252. If the palette also includes the transparent color, the total number of colors is 253
    Define gpPaletteTypeFixedHalftone256    for 9 // A palette based on 8 intensities of red, 8 intensities of green, and 4 intensities of blue. The system palette is not included. The total number of colors is 256. If the transparent color is included in this palette, it must replace one of the RGB combinations

Define gpHistogramFormat for Integer
    Define gpHistogramFormatARGB    for 0 // Specifies that the GetHistogram method returns four histograms: one each for the alpha, red, green, and blue channels. The alpha-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The red-channel histogram is written to the buffer pointed to by the channel1 parameter. The green-channel histogram is written to the buffer pointed to by the channel2 parameter. The blue-channel histogram is written to the buffer pointed to by the channel3 parameter
    Define gpHistogramFormatPARGB   for 1 // Specifies that the GetHistogram method returns four histograms: one each for the alpha, red, green, and blue channels. The red, green, and blue channels are each multiplied by the alpha channel before the histograms are created. The bitmap is not permanently altered when the color channels are multiplied by the alpha channel; that multiplication is only for the purpose of creating the histograms. The alpha-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The red-channel histogram is written to the buffer pointed to by the channel1 parameter. The green-channel histogram is written to the buffer pointed to by the channel2 parameter. The blue-channel histogram is written to the buffer pointed to by the channel3 parameter
    Define gpHistogramFormatRGB     for 2 // Specifies that the GetHistogram method returns three histograms: one each for the red, green, and blue channels. The red-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The green-channel histogram is written to the buffer pointed to by the channel1 parameter. The blue-channel histogram is written to the buffer pointed to by the channel2 parameter. The channel3 parameter must be set to NULL
    Define gpHistogramFormatGray    for 3 // Specifies that each pixel is converted to a grayscale value in the range 0 through 255, and then one histogram, based on those grayscale value, is returned. The bitmap is not permanently altered by the conversion to grayscale values; those values are calculated only for the purpose of creating the histogram. The grayscale histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The channel1, channel2, and channel3 parameters must be set to NULL
    Define gpHistogramFormatB       for 4 // Specifies that the GetHistogram method returns a histogram for the blue channel. The blue-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The channel1, channel2, and channel3 parameters must be set to NULL
    Define gpHistogramFormatG       for 5 // Specifies that the GetHistogram method returns a histogram for the green channel. The green-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The channel1, channel2, and channel3 parameters must be set to NULL
    Define gpHistogramFormatR       for 6 // Specifies that the GetHistogram method returns a histogram for the red channel. The red-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The channel1, channel2, and channel3 parameters must be set to NULL
    Define gpHistogramFormatA       for 7 // Specifies that the GetHistogram method returns a histogram for the alpha channel. The alpha-channel histogram is written to the buffer pointed to by the channel0 parameter of the GetHistogram method. The channel1, channel2, and channel3 parameters must be set to NULL

Define gpRotateFlipType for Integer
    Define gpRotateNoneFlipNone for 0 // Specifies no clockwise rotation and no flipping
    Define gpRotate90FlipNone   for 1 // Specifies a 90-degree clockwise rotation without flipping
    Define gpRotate180FlipNone  for 2 // Specifies a 180-degree clockwise rotation without flipping
    Define gpRotate270FlipNone  for 3 // Specifies a 270-degree clockwise rotation without flipping
    Define gpRotateNoneFlipX    for 4 // Specifies no clockwise rotation followed by a horizontal flip
    Define gpRotate90FlipX      for 5 // Specifies a 90-degree clockwise rotation followed by a horizontal flip
    Define gpRotate180FlipX     for 6 // Specifies a 180-degree clockwise rotation followed by a horizontal flip
    Define gpRotate270FlipX     for 7 // Specifies a 270-degree clockwise rotation followed by a horizontal flip
    Define gpRotateNoneFlipY    for 6 // Specifies no clockwise rotation followed by a vertical flip
    Define gpRotate90FlipY      for 7 // Specifies a 90-degree clockwise rotation followed by a vertical flip
    Define gpRotate180FlipY     for 4 // Specifies a 180-degree clockwise rotation followed by a vertical flip
    Define gpRotate270FlipY     for 5 // Specifies a 270-degree clockwise rotation followed by a vertical flip
    Define gpRotateNoneFlipXY   for 2 // Specifies no clockwise rotation followed by a horizontal and vertical flip
    Define gpRotate90FlipXY     for 3 // Specifies a 90-degree clockwise rotation followed by a horizontal and vertical flip
    Define gpRotate180FlipXY    for 0 // Specifies a 180-degree clockwise rotation followed by a horizontal and vertical flip
    Define gpRotate270FlipXY    for 1 // Specifies a 270-degree clockwise rotation followed by a horizontal and vertical flip

Define gpImageLockMode for Integer
    Define gpImageLockModeRead            for 1 // Specifies that a portion of the image is locked for reading
    Define gpImageLockModeWrite           for 2 // Specifies that a portion of the image is locked for writing
    Define gpImageLockModeUserInputBuf    for 4 // Specifies that the buffer used for reading or writing pixel data is allocated by the user. If this flag is set, then the lockedBitmapData parameter of the LockBits method serves as an input parameter (and possibly as an output parameter). If this flag is cleared, then the lockedBitmapData parameter serves only as an output parameter

Define gpItemDataPosition for Integer
    Define gpItemDataPositionAfterHeader  for 0 // Specifies that custom metadata is stored after the file header. Valid for JPEG, PNG, and GIF
    Define gpItemDataPositionAfterPalette for 1 // Specifies that custom metadata is stored after the palette. Valid for PNG
    Define gpItemDataPositionAfterBits    for 2 // Specifies that custom metadata is stored after the pixel data. Valid for GIF and PNG

Define guidImageFormatBMP       for "B96B3CAB-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatEMF       for "B96B3CAC-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatGIF       for "B96B3CB0-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatIcon      for "B96B3CB5-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatJPEG      for "B96B3CAE-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatMemoryBMP for "B96B3CAA-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatPNG       for "B96B3CAF-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatTIFF      for "B96B3CB1-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatWMF       for "B96B3CAD-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatPHOTOCD   for "B96B3CB3-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatEXIF      for "B96B3CB2-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatFLASHPIX  for "B96B3CB4-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatHEIF      for "B96B3CB6-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatWEBP      for "B96B3CB7-0728-11D3-9D7B-0000F81EF32E"
Define guidImageFormatUndefined for "B96B3CA9-0728-11D3-9D7B-0000F81EF32E"

// Tag Image File Format for Eletronic Photography
Define guidImageFormatTIFFEP    for "8E77B6EB-DE2E-4339-B5F8-2083D96CC678"
// Canon Image File Format
Define guidImageFormatCIFF      for "9821A8AB-3A7E-4215-94E0-D27A460C0CB2"
// JPEG File Interchange Format
Define guidImageFormatJFIF      for "548314DF-387A-4F46-B154-625FD7425C8C"
// Quickdraw Image Format
Define guidImageFormatPICT      for "A6BC85D8-6B3E-40EE-A95C-25D482E41ADC"
// Tag Image File Format for Information Technology(graphic arts)
Define guidImageFormatTIFFIT    for "94F80620-5FD7-4530-B75B-0367334ED1AD"
// JPEG 2000 baseline file format
Define guidImageFormatJPEG2K    for "344EE2B2-39DB-4DDE-8173-C4B75F8F1E49"
// JPEG 2000 extended file format
Define guidImageFormatJPEG2KX   for "43E14614-C80A-4850-BAF3-4B152DC8DA27"

Define guidFrameDimensionPage for "7462DC86-6180-4C7E-8E3F-EE7333A7A483"
Define guidFrameDimensionTime for "6AEDBD6D-3FB5-418A-83A6-7F45229DC872"

Define C_$NoStrobeReturnDetectionFunction   for "No strobe return detection function"
Define C_$StrobReturnLightNotDetected       for "Strobe return light not detected"
Define C_$StrobeReturnLightDetected         for "Strobe return light detected"

Define C_$FlashDidNotFire   for "Flash did not fire"

//---------------------------------------------------------------------------
// Metafile Types
//---------------------------------------------------------------------------
Define gpMetafileType for Integer
    Define gpMetafileTypeInvalid        for 0 // Specifies a metafile format that is not recognized in GDI+
    Define gpMetafileTypeWmf            for 1 // Specifies a WMF file. Such a file contains only GDI records
    Define gpMetafileTypeWmfPlaceable   for 2 // Specifies a WMF file that has a placeable metafile header in front of it
    Define gpMetafileTypeEmf            for 3 // Specifies an EMF file. Such a file contains only GDI records
    Define gpMetafileTypeEmfPlusOnly    for 4 // Specifies an EMF+ file. Such a file contains only GDI+ records and must be displayed by using GDI+. Displaying the records using GDI may cause unpredictable results
    Define gpMetafileTypeEmfPlusDual    for 5 // Specifies an EMF+ Dual file. Such a file contains GDI+ records along with alternative GDI records and can be displayed by using either GDI or GDI+. Displaying the records using GDI may cause some quality degradation

//---------------------------------------------------------------------------
// Image flags
//---------------------------------------------------------------------------
Define gpImageFlags for Integer
    Define gpImageFlagsNone              for 0            // Specifies no format information
    Define gpImageFlagsScalable          for |CI$0001     // Specifies that the image can be scaled
    Define gpImageFlagsHasAlpha          for |CI$0002     // Specifies that the pixel data contains alpha values
    Define gpImageFlagsHasTranslucent    for |CI$0004     // Specifies that the pixel data has alpha values other than 0 (transparent) and 255 (opaque)
    Define gpImageFlagsPartiallyScalable for |CI$0008     // Specifies that the pixel data is partially scalable with some limitations
    Define gpImageFlagsColorSpaceRGB     for |CI$0010     // Specifies that the image is stored using an RGB color space
    Define gpImageFlagsColorSpaceCMYK    for |CI$0020     // Specifies that the image is stored using a CMYK color space
    Define gpImageFlagsColorSpaceGRAY    for |CI$0040     // Specifies that the image is a grayscale image
    Define gpImageFlagsColorSpaceYCBCR   for |CI$0080     // Specifies that the image is stored using a YCBCR color space
    Define gpImageFlagsColorSpaceYCCK    for |CI$0100     // Specifies that the image is stored using a YCCK color space
    Define gpImageFlagsHasRealDPI        for |CI$1000     // Specifies that dots per inch information is stored in the image
    Define gpImageFlagsHasRealPixelSize  for |CI$2000     // Specifies that the pixel size is stored in the image
    Define gpImageFlagsReadOnly          for |CI$00010000 // Specifies that the pixel data is read-only
    Define gpImageFlagsCaching           for |CI$00020000 // Specifies that the pixel data can be cached for faster access

//---------------------------------------------------------------------------
// Specifies the type of EMF to record
//---------------------------------------------------------------------------
Define gpEmfType for Integer
    Define gpEmfTypeEmfOnly     for gpMetafileTypeEmf         // Specifies that all of the records in the metafile are EMF records, which can be displayed by GDI or GDI+
    Define gpEmfTypeEmfPlusOnly for gpMetafileTypeEmfPlusOnly // Specifies that all of the records in the metafile are EMF+ records, which can be displayed by GDI+ but not by GDI
    Define gpEmfTypeEmfPlusDual for gpMetafileTypeEmfPlusDual // Specifies that all EMF+ records in the metafile are associated with an alternate EMF record. Metafiles of type EmfTypeEmfPlusDual can be displayed by GDI or by GDI+

//---------------------------------------------------------------------------
// Image Pixel Format
//---------------------------------------------------------------------------
Define gpPixelFormat for Integer
    Define gpPixelFormatIndexed      for 65536   // The pixel data contains color-indexed values, which means the values are an index to colors in the system color table, as opposed to individual color values
    Define gpPixelFormatGDI          for 131072  // The pixel data contains GDI colors
    Define gpPixelFormatAlpha        for 262144  // The pixel data contains alpha values that are not premultiplied
    Define gpPixelFormatPAlpha       for 524288  // The pixel format contains premultiplied alpha values
    Define gpPixelFormatExtended     for 1048576 // Reserved
    Define gpPixelFormatCanonical    for 2097152 // The default pixel format of 32 bits per pixel. The format specifies 24-bit color depth and an 8-bit alpha channel

    Define gpPixelFormatUndefined       for 0 // The pixel format is undefined
    Define gpPixelFormatDontCare        for 0 // No pixel format is specified

    Define gpPixelFormat1bppIndexed     for 196865  // Specifies that the pixel format is 1 bit per pixel and that it uses indexed color. The color table therefore has two colors in it
    Define gpPixelFormat4bppIndexed     for 197634  // Specifies that the format is 4 bits per pixel, indexed
    Define gpPixelFormat8bppIndexed     for 198659  // Specifies that the format is 8 bits per pixel, indexed. The color table therefore has 256 colors in it
    Define gpPixelFormat16bppGrayScale  for 1052676 // The pixel format is 16 bits per pixel. The color information specifies 65536 shades of gray
    Define gpPixelFormat16bppRGB555     for 135173  // Specifies that the format is 16 bits per pixel; 5 bits each are used for the red, green, and blue components. The remaining bit is not used
    Define gpPixelFormat16bppRGB565     for 135174  // Specifies that the format is 16 bits per pixel; 5 bits are used for the red component, 6 bits are used for the green component, and 5 bits are used for the blue component.
    Define gpPixelFormat16bppARGB1555   for 397319  // The pixel format is 16 bits per pixel. The color information specifies 32,768 shades of color, of which 5 bits are red, 5 bits are green, 5 bits are blue, and 1 bit is alpha
    Define gpPixelFormat24bppRGB        for 137224  // Specifies that the format is 24 bits per pixel; 8 bits each are used for the red, green, and blue components
    Define gpPixelFormat32bppRGB        for 139273  // Specifies that the format is 32 bits per pixel; 8 bits each are used for the red, green, and blue components. The remaining 8 bits are not used
    Define gpPixelFormat32bppARGB       for 2498570 // Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components
    Define gpPixelFormat32bppPARGB      for 925707  // Specifies that the format is 32 bits per pixel; 8 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied, according to the alpha component
    Define gpPixelFormat48bppRGB        for 1060876 // Specifies that the format is 48 bits per pixel; 16 bits each are used for the red, green, and blue components
    Define gpPixelFormat64bppARGB       for 3424269 // Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components
    Define gpPixelFormat64bppPARGB      for 1851406 // Specifies that the format is 64 bits per pixel; 16 bits each are used for the alpha, red, green, and blue components. The red, green, and blue components are premultiplied according to the alpha component
    Define gpPixelFormat32bppCMYK       for 8207
    Define gpPixelFormatMax             for 16      // The maximum value for this enumeration (MSDN says 15, GDI+ include file 16)

// GpStatus WINGDIPAPI GdipCreateBitmapFromStream(IStream* stream, GpBitmap **bitmap)
External_Function GdipCreateBitmapFromStream "GdipCreateBitmapFromStream" gdiplus.dll ;
    Pointer stream ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromFile(GDIPCONST WCHAR* filename, GpBitmap **bitmap)
External_Function GdipCreateBitmapFromFile "GdipCreateBitmapFromFile" gdiplus.dll ;
    Pointer filename ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromStreamICM(IStream* stream, GpBitmap **bitmap)
External_Function GdipCreateBitmapFromStreamICM "GdipCreateBitmapFromStreamICM" gdiplus.dll ;
    Pointer stream ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromFileICM(GDIPCONST WCHAR* filename, GpBitmap **bitmap)
External_Function GdipCreateBitmapFromFileICM "GdipCreateBitmapFromFileICM" gdiplus.dll ;
    Pointer filename ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromScan0(INT width, INT height, INT stride, PixelFormat format, BYTE* scan0, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromScan0 "GdipCreateBitmapFromScan0" gdiplus.dll ;
    Integer width ;
    Integer height ;
    Integer stride ;
    gpPixelFormat format ;
    Pointer scan0 ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromGraphics(INT width, INT height, GpGraphics* target, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromGraphics "GdipCreateBitmapFromGraphics" gdiplus.dll ;
    Integer width ;
    Integer height ;
    Pointer target ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromDirectDrawSurface(IDirectDrawSurface7* surface, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromDirectDrawSurface "GdipCreateBitmapFromDirectDrawSurface" gdiplus.dll ;
    Pointer surface ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromGdiDib(GDIPCONST BITMAPINFO* gdiBitmapInfo, VOID* gdiBitmapData, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromGdiDib "GdipCreateBitmapFromGdiDib" gdiplus.dll ;
    Pointer gdiBitmapInfo ;
    Pointer gdiBitmapData ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromHBITMAP(HBITMAP hbm, HPALETTE hpal, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromHBITMAP "GdipCreateBitmapFromHBITMAP" gdiplus.dll ;
    Handle hbm ;
    Handle hpal ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateHBITMAPFromBitmap(GpBitmap* bitmap, HBITMAP* hbmReturn, ARGB background)
External_Function GdipCreateHBITMAPFromBitmap "GdipCreateHBITMAPFromBitmap" gdiplus.dll ;
    Pointer bitmap ;
    Pointer hbmReturn ;
    UInteger background ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromHICON(HICON hicon, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromHICON "GdipCreateBitmapFromHICON" gdiplus.dll ;
    Handle hicon ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateHICONFromBitmap(GpBitmap* bitmap, HICON* hbmReturn)
External_Function GdipCreateHICONFromBitmap "GdipCreateHICONFromBitmap" gdiplus.dll ;
    Pointer bitmap ;
    Pointer hbmReturn ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCreateBitmapFromResource(HINSTANCE hInstance, GDIPCONST WCHAR* lpBitmapName, GpBitmap** bitmap)
External_Function GdipCreateBitmapFromResource "GdipCreateBitmapFromResource" gdiplus.dll ;
    Handle hInstance ;
    Pointer lpBitmapName ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCloneBitmapArea(REAL x, REAL y, REAL width, REAL height, PixelFormat format, GpBitmap *srcBitmap, GpBitmap **dstBitmap)
External_Function GdipCloneBitmapArea "GdipCloneBitmapArea" gdiplus.dll ;
    Float x ;
    Float y ;
    Float width ;
    Float height ;
    gpPixelFormat format ;
    Pointer srcBitmap ;
    Pointer dstBitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCloneBitmapAreaI(INT x, INT y, INT width, INT height, PixelFormat format, GpBitmap *srcBitmap, GpBitmap **dstBitmap)
External_Function GdipCloneBitmapAreaI "GdipCloneBitmapAreaI" gdiplus.dll ;
    Integer x ;
    Integer y ;
    Integer width ;
    Integer height ;
    gpPixelFormat format ;
    Pointer srcBitmap ;
    Pointer dstBitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapLockBits(GpBitmap* bitmap, GDIPCONST GpRect* rect, UINT flags, PixelFormat format, BitmapData* lockedBitmapData)
External_Function GdipBitmapLockBits "GdipBitmapLockBits" gdiplus.dll ;
    Pointer bitmap ;
    Pointer rect ;
    UInteger flags ;
    gpPixelFormat format ;
    Pointer lockedBitmapData ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapUnlockBits(GpBitmap* bitmap, BitmapData* lockedBitmapData)
External_Function GdipBitmapUnlockBits "GdipBitmapUnlockBits" gdiplus.dll ;
    Pointer bitmap ;
    Pointer lockedBitmapData ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapGetPixel(GpBitmap* bitmap, INT x, INT y, ARGB *color)
External_Function GdipBitmapGetPixel "GdipBitmapGetPixel" gdiplus.dll ;
    Pointer bitmap ;
    Integer x ;
    Integer y ;
    Pointer color ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapSetPixel(GpBitmap* bitmap, INT x, INT y, ARGB color)
External_Function GdipBitmapSetPixel "GdipBitmapSetPixel" gdiplus.dll ;
    Pointer bitmap ;
    Integer x ;
    Integer y ;
    UInteger color ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapSetResolution(GpBitmap* bitmap, REAL xdpi, REAL ydpi)
External_Function GdipBitmapSetResolution "GdipBitmapSetResolution" gdiplus.dll ;
    Pointer bitmap ;
    Float xdpi ;
    Float ydpi ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapConvertFormat(IN GpBitmap *pInputBitmap, PixelFormat format, DitherType dithertype, PaletteType palettetype, ColorPalette *palette, REAL alphaThresholdPercent)
External_Function GdipBitmapConvertFormat "GdipBitmapConvertFormat" gdiplus.dll ;
    Pointer pInputBitmap ;
    gpPixelFormat format ;
    gpDitherType dithertype ;
    gpPaletteType palettetype ;
    Pointer pplette ;
    Float alphaThresholdPercent ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipInitializePalette(OUT ColorPalette *palette, PaletteType palettetype, INT optimalColors, BOOL useTransparentColor, GpBitmap *bitmap)
External_Function GdipInitializePalette "GdipInitializePalette" gdiplus.dll ;
    Pointer ppalette ;
    gpPaletteType palettetype ;
    Integer optimalColors ;
    Boolean useTransparentColor ;
    Pointer bitmap ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapApplyEffect(GpBitmap* bitmap, CGpEffect *effect, RECT *roi, BOOL useAuxData, VOID **auxData, INT *auxDataSize)
External_Function GdipBitmapApplyEffect "GdipBitmapApplyEffect" gdiplus.dll ;
    Pointer bitmap ;
    Pointer effect ;
    Pointer roi ;
    Boolean useAuxData ;
    Pointer puxData ;
    Pointer puxDataSize ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapCreateApplyEffect(GpBitmap **inputBitmaps, INT numInputs, CGpEffect *effect, RECT *roi, RECT *outputRect, GpBitmap **outputBitmap, BOOL useAuxData, VOID **auxData, INT *auxDataSize)
External_Function GdipBitmapCreateApplyEffect "GdipBitmapCreateApplyEffect" gdiplus.dll ;
    Pointer inputBitmaps ;
    Integer numInputs ;
    Pointer effect ;
    Pointer roi ;
    Pointer outputRect ;
    Pointer outputBitmap ;
    Boolean useAuxData ;
    Pointer puxData ;
    Pointer puxDataSize ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapGetHistogram(GpBitmap* bitmap, IN HistogramFormat format, IN UINT NumberOfEntries, OUT UINT *channel0, OUT UINT *channel1, OUT UINT *channel2, OUT UINT *channel3)
External_Function GdipBitmapGetHistogram "GdipBitmapGetHistogram" gdiplus.dll ;
    Pointer bitmap ;
    gpHistogramFormat format ;
    UInteger NumberOfEntries ;
    Pointer channel0 ;
    Pointer channel1 ;
    Pointer channel2 ;
    Pointer channel3 ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipBitmapGetHistogramSize(IN HistogramFormat format, OUT UINT *NumberOfEntries)
External_Function GdipBitmapGetHistogramSize "GdipBitmapGetHistogramSize" gdiplus.dll ;
    gpHistogramFormat format ;
    Pointer NumerOfEntries ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipLoadImageFromStream(IStream* stream, GpImage **image)
External_Function GdipLoadImageFromStream "GdipLoadImageFromStream" gdiplus.dll ;
    Pointer stream ;
    Pointer image ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipLoadImageFromFile(GDIPCONST WCHAR* filename, GpImage **image)
External_Function GdipLoadImageFromFile "GdipLoadImageFromFile" gdiplus.dll ;
    Pointer filename ;
    Pointer image ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipLoadImageFromStreamICM(IStream* stream, GpImage **image)
External_Function GdipLoadImageFromStreamICM "GdipLoadImageFromStreamICM" gdiplus.dll ;
    Pointer stream ;
    Pointer image ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipLoadImageFromFileICM(GDIPCONST WCHAR* filename, GpImage **image)
External_Function GdipLoadImageFromFileICM "GdipLoadImageFromFileICM" gdiplus.dll ;
    Pointer filename ;
    Pointer image ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipCloneImage(GpImage *image, GpImage **cloneImage)
External_Function GdipCloneImage "GdipCloneImage" gdiplus.dll ;
    Pointer image ;
    Pointer cloneImage ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipDisposeImage(GpImage *image)
External_Function GdipDisposeImage "GdipDisposeImage" gdiplus.dll ;
    Pointer image ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSaveImageToFile(GpImage *image, GDIPCONST WCHAR* filename, GDIPCONST CLSID* clsidEncoder, GDIPCONST EncoderParameters* encoderParams)
External_Function GdipSaveImageToFile "GdipSaveImageToFile" gdiplus.dll ;
    Pointer image ;
    Pointer filename ;
    Pointer clsidEncoder ;
    Pointer encoderParams ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSaveImageToStream(GpImage *image, IStream* stream, GDIPCONST CLSID* clsidEncoder, GDIPCONST EncoderParameters* encoderParams)
External_Function GdipSaveImageToStream "GdipSaveImageToStream" gdiplus.dll ;
    Pointer image ;
    Pointer stream ;
    Pointer clsidEncoder ;
    Pointer encoderParams ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSaveAdd(GpImage *image, GDIPCONST EncoderParameters* encoderParams)
External_Function GdipSaveAdd "GdipSaveAdd" gdiplus.dll ;
    Pointer image ;
    Pointer encoderParams ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSaveAddImage(GpImage *image, GpImage* newImage, GDIPCONST EncoderParameters* encoderParams)
External_Function GdipSaveAddImage "GdipSaveAddImage" gdiplus.dll ;
    Pointer image ;
    Pointer newImage ;
    Pointer encoderParams ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageGraphicsContext(GpImage *image, GpGraphics **graphics)
External_Function GdipGetImageGraphicsContext "GdipGetImageGraphicsContext" gdiplus.dll ;
    Pointer image ;
    Pointer graphics ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageBounds(GpImage *image, GpRectF *srcRect, GpUnit *srcUnit)
External_Function GdipGetImageBounds "GdipGetImageBounds" gdiplus.dll ;
    Pointer image ;
    Pointer srcRect ;
    Pointer srcUnit ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageDimension(GpImage *image, REAL *width, REAL *height)
External_Function GdipGetImageDimension "GdipGetImageDimension" gdiplus.dll ;
    Pointer image ;
    Pointer width ;
    Pointer height ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageType(GpImage *image, ImageType *type)
External_Function GdipGetImageType "GdipGetImageType" gdiplus.dll ;
    Pointer image ;
    Pointer type ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageWidth(GpImage *image, UINT *width)
External_Function GdipGetImageWidth "GdipGetImageWidth" gdiplus.dll ;
    Pointer image ;
    Pointer width ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageHeight(GpImage *image, UINT *height)
External_Function GdipGetImageHeight "GdipGetImageHeight" gdiplus.dll ;
    Pointer image ;
    Pointer height ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageHorizontalResolution(GpImage *image, REAL *resolution)
External_Function GdipGetImageHorizontalResolution "GdipGetImageHorizontalResolution" gdiplus.dll ;
    Pointer image ;
    Pointer resolution ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageVerticalResolution(GpImage *image, REAL *resolution)
External_Function GdipGetImageVerticalResolution "GdipGetImageVerticalResolution" gdiplus.dll ;
    Pointer image ;
    Pointer resolution ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageFlags(GpImage *image, UINT *flags)
External_Function GdipGetImageFlags "GdipGetImageFlags" gdiplus.dll ;
    Pointer image ;
    Pointer flags ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageRawFormat(GpImage *image, GUID *format)
External_Function GdipGetImageRawFormat "GdipGetImageRawFormat" gdiplus.dll ;
    Pointer image ;
    Pointer format ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImagePixelFormat(GpImage *image, PixelFormat *format)
External_Function GdipGetImagePixelFormat "GdipGetImagePixelFormat" gdiplus.dll ;
    Pointer image ;
    Pointer format ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageThumbnail(GpImage *image, UINT thumbWidth, UINT thumbHeight, GpImage **thumbImage, GetThumbnailImageAbort callback, VOID * callbackData)
External_Function GdipGetImageThumbnail "GdipGetImageThumbnail" gdiplus.dll ;
    Pointer image ;
    UInteger thumbWidth ;
    UInteger thumbHeight ;
    Pointer thumbImage ;
    Pointer callback ;
    Pointer callbackData ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageGetFrameDimensionsCount(GpImage* image, UINT* count)
External_Function GdipImageGetFrameDimensionsCount "GdipImageGetFrameDimensionsCount" gdiplus.dll ;
    Pointer image ;
    Pointer count ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageGetFrameDimensionsList(GpImage* image, GUID* dimensionIDs, UINT count)
External_Function GdipImageGetFrameDimensionsList "GdipImageGetFrameDimensionsList" gdiplus.dll ;
    Pointer image ;
    Pointer dimensionIDs ;
    UInteger count ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageGetFrameCount(GpImage *image, GDIPCONST GUID* dimensionID, UINT* count)
External_Function GdipImageGetFrameCount "GdipImageGetFrameCount" gdiplus.dll ;
    Pointer image ;
    Pointer dimensionID ;
    Pointer count ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageSelectActiveFrame(GpImage *image, GDIPCONST GUID* dimensionID, UINT frameIndex)
External_Function GdipImageSelectActiveFrame "GdipImageSelectActiveFrame" gdiplus.dll ;
    Pointer image ;
    Pointer dimensionID ;
    UInteger frameIndex ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageRotateFlip(GpImage *image, RotateFlipType rfType)
External_Function GdipImageRotateFlip "GdipImageRotateFlip" gdiplus.dll ;
    Pointer image ;
    gpRotateFlipType rfType ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImagePalette(GpImage *image, ColorPalette *palette, INT size)
External_Function GdipGetImagePalette "GdipGetImagePalette" gdiplus.dll ;
    Pointer image ;
    Pointer pplette ;
    Integer size ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSetImagePalette(GpImage *image, GDIPCONST ColorPalette *palette)
External_Function GdipSetImagePalette "GdipSetImagePalette" gdiplus.dll ;
    Pointer image ;
    Pointer pplette ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImagePaletteSize(GpImage *image, INT *size)
External_Function GdipGetImagePaletteSize "GdipGetImagePaletteSize" gdiplus.dll ;
    Pointer image ;
    Pointer size ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetPropertyCount(GpImage *image, UINT* numOfProperty)
External_Function GdipGetPropertyCount "GdipGetPropertyCount" gdiplus.dll ;
    Pointer image ;
    Pointer numOfProperty ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetPropertyIdList(GpImage *image, UINT numOfProperty, PROPID* list)
External_Function GdipGetPropertyIdList "GdipGetPropertyIdList" gdiplus.dll ;
    Pointer image ;
    UInteger numOfProperty ;
    Pointer list ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetPropertyItemSize(GpImage *image, PROPID propId, UINT* size)
External_Function GdipGetPropertyItemSize "GdipGetPropertyItemSize" gdiplus.dll ;
    Pointer image ;
    UInteger propId ;
    Pointer size ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetPropertyItem(GpImage *image, PROPID propId,UINT propSize, PropertyItem* buffer)
External_Function GdipGetPropertyItem "GdipGetPropertyItem" gdiplus.dll ;
    Pointer image ;
    UInteger propId ;
    UInteger propSize ;
    Pointer buffer ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetPropertySize(GpImage *image, UINT* totalBufferSize, UINT* numProperties)
External_Function GdipGetPropertySize "GdipGetPropertySize" gdiplus.dll ;
    Pointer image ;
    Pointer totalBufferSize ;
    Pointer numProperties ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetAllPropertyItems(GpImage *image, UINT totalBufferSize, UINT numProperties, PropertyItem* allItems)
External_Function GdipGetAllPropertyItems "GdipGetAllPropertyItems" gdiplus.dll ;
    Pointer image ;
    UInteger totalBufferSize ;
    UInteger numProperties ;
    Pointer pllItems ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipRemovePropertyItem(GpImage *image, PROPID propId)
External_Function GdipRemovePropertyItem "GdipRemovePropertyItem" gdiplus.dll ;
    Pointer image ;
    UInteger propId ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipSetPropertyItem(GpImage *image, GDIPCONST PropertyItem* item)
External_Function GdipSetPropertyItem "GdipSetPropertyItem" gdiplus.dll ;
    Pointer image ;
    Pointer item ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipFindFirstImageItem(GpImage *image, ImageItemData* item)
External_Function GdipFindFirstImageItem "GdipFindFirstImageItem" gdiplus.dll ;
    Pointer image ;
    Pointer item ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipFindNextImageItem(GpImage *image, ImageItemData* item)
External_Function GdipFindNextImageItem "GdipFindNextImageItem" gdiplus.dll ;
    Pointer image ;
    Pointer Item ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipGetImageItemData(GpImage *image, ImageItemData* item)
External_Function GdipGetImageItemData "GdipGetImageItemData" gdiplus.dll ;
    Pointer image ;
    Pointer item ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageSetAbort(GpImage *pImage, GdiplusAbort *pIAbort)
External_Function GdipImageSetAbort "GdipImageSetAbort" gdiplus.dll ;
    Pointer image ;
    Pointer pIAbort ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipConvertToEmfPlus(const GpGraphics* refGraphics, GpMetafile* metafile, BOOL* conversionSuccess, EmfType emfType, const WCHAR* description, GpMetafile** out_metafile)
External_Function GdipConvertToEmfPlus "GdipConvertToEmfPlus" gdiplus.dll ;
    Pointer refGraphics ;
    Pointer metafile ;
    Pointer conversionSuccess ;
    gpEmfType emfType ;
    Pointer description ;
    Pointer out_metafile ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipConvertToEmfPlusToFile(const GpGraphics* refGraphics, GpMetafile* metafile, BOOL* conversionSuccess, const WCHAR* filename, EmfType emfType, const WCHAR* description, GpMetafile** out_metafile)
External_Function GdipConvertToEmfPlusToFile "GdipConvertToEmfPlusToFile" gdiplus.dll ;
    Pointer refGraphics ;
    Pointer metafile ;
    Pointer conversionSuccess ;
    Pointer filename ;
    gpEmfType emfType ;
    Pointer description ;
    Pointer out_metafile ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipConvertToEmfPlusToStream(const GpGraphics* refGraphics, GpMetafile* metafile, BOOL* conversionSuccess, IStream* stream, EmfType emfType, const WCHAR* description, GpMetafile** out_metafile)
External_Function GdipConvertToEmfPlusToStream "GdipConvertToEmfPlusToStream" gdiplus.dll ;
    Pointer refGraphics ;
    Pointer metafile ;
    Pointer conversionSuccess ;
    Pointer stream ;
    gpEmfType emfType ;
    Pointer description ;
    Pointer out_metafile ;
    Returns gpStatus

// GpStatus WINGDIPAPI GdipImageForceValidation(GpImage *image)
External_Function GdipImageForceValidation "GdipImageForceValidation" gdiplus.dll ;
    Pointer image ;
    Returns gpStatus
